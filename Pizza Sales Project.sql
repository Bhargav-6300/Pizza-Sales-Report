-- Create Pizza Database
create database pizzahut;

-- select database
use pizzahut;

-- Importing and presenting pizzas table
select * from pizzas;

-- Importing and presenting pizza types table
select * from pizza_types;

-- creating orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY, 
    order_date DATE,  
    order_time TIME  
);
select * from orders;

-- creating order_details table
create table order_details (order_details_id int primary key,
							order_id int,
                            pizza_id text,
                            quantity int);
select * from order_details;

-- Solve the following questions
-- Q1) retrieve the total no.of orders placed
select count(order_id) as no_of_orders from orders;

-- Q2) Calculate the total revenue generated by pizza sales
SELECT 
    ROUND(SUM((o.quantity * p.price)), 2) AS total_revenue
FROM
    pizzas p
        JOIN
    order_details o ON p.pizza_id = o.pizza_id;

-- Q3) Identify the highest priced pizza
SELECT 
    pi.name, MAX(p.price) AS max_price
FROM
    pizza_types pi
        JOIN
    pizzas p ON pi.pizza_type_id = p.pizza_type_id
GROUP BY pi.name
ORDER BY MAX(p.price) DESC
LIMIT 1;

-- Q4) Identify the most common pizza size ordered
SELECT 
    p.size, COUNT(o.order_details_id) AS total_orders
FROM
    pizzas p
        JOIN
    order_details o ON p.pizza_id = o.pizza_id
GROUP BY p.size
ORDER BY COUNT(o.order_details_id) DESC
LIMIT 1;

-- Q5) list the top 5 most ordered pizza types along with their quantities
SELECT 
    pt.name AS pizza_type, SUM(od.quantity) AS total_quantity
FROM
    order_details od
        JOIN
    pizzas p ON od.pizza_id = p.pizza_id
        JOIN
    pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.name
ORDER BY total_quantity DESC
LIMIT 5;

-- Q6) join the necessary tables to find the total quantity of each pizza category ordered
SELECT 
    pi.category, COUNT(o.quantity) AS total_quantity
FROM
    pizza_types pi
        JOIN
    pizzas p ON pi.pizza_type_id = p.pizza_type_id
        JOIN
    order_details o ON p.pizza_id = o.pizza_id
GROUP BY pi.category
order by total_quantity desc;

-- Q7) determine the distribution of orders by hour of the day
SELECT 
    HOUR(order_time) AS hour, COUNT(order_id) AS no_of_orders
FROM
    orders
GROUP BY HOUR(order_time)
ORDER BY hour;

-- Q8) join the relevent tables to find the category wise distribution of pizzas
SELECT 
    category, COUNT(name) AS pizzas
FROM
    pizza_types
GROUP BY category;

-- Q9) group the orders by date and calculate the avg no.of pizzas ordered per day
SELECT 
    ROUND(AVG(quantity), 0)
FROM
    (SELECT 
        o.order_date, SUM(od.quantity) AS quantity
    FROM
        orders o
    JOIN order_details od ON o.order_id = od.order_id
    GROUP BY o.order_date) AS order_quantity;

-- Q10) determine the top 3 most ordered pizza types on revenue
SELECT 
    pt.name, (od.quantity * p.price) AS revenue
FROM
    pizza_types pt
        JOIN
    pizzas p ON pt.pizza_type_id = p.pizza_type_id
        JOIN
    order_details od ON p.pizza_id = od.pizza_id
ORDER BY revenue DESC
LIMIT 3;

-- Q11) calculate the percentage contribution of each pizza type to total revenue
SELECT 
    pt.category,
    ROUND((ROUND(SUM(p.price * od.quantity), 2) / (SELECT 
                    ROUND(SUM(od.quantity * p.price), 2) AS quantity
                FROM
                    order_details od
                        JOIN
                    pizzas p ON od.pizza_id = p.pizza_id)) * 100,
            2) AS revenue
FROM
    pizza_types pt
        JOIN
    pizzas p ON pt.pizza_type_id = p.pizza_type_id
        JOIN
    order_details od ON p.pizza_id = od.pizza_id
GROUP BY pt.category
ORDER BY revenue DESC;

-- Q12) analyse the cumulative revenue generated over time
select order_date, sum(revenue) over(order by order_date) as cum_revenue from (select o.order_date, sum(od.quantity * p.price) as revenue from 
order_details od join pizzas p on od.pizza_id = p.pizza_id
join orders o on o.order_id = od.order_id group by o.order_date) as sales;

-- Q13) determine the top 3 most ordered pizza types on revenue for each price category
select category, name, revenue, rank() over(partition by category order by revenue desc) as rn from 
(select pt.category, pt.name, sum((od.quantity) * p.price) as revenue 
from pizza_types pt join pizzas p 
on pt.pizza_type_id = p.pizza_type_id join order_details od
on od.pizza_id = p.pizza_id
group by pt.category, pt.name) as a where rn <= 3; 

